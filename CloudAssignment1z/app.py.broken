from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
import csv
import os
import io
from datetime import datetime
from azure.storage.blob import BlobServiceClient
from azure.data.tables import TableServiceClient, TableEntity
from azure.identity import DefaultAzureCredential
from azure.core.exceptions import ResourceExistsError, ResourceNotFoundError

app = Flask(__                return f'''
                <div style="font-family: Arial; max-width: 800px; margin: 50px auto; padding: 20px;">
                    <h1>üîç Search Results for: "{search_term}"</h1>
                    
                    {f'<div style="padding: 15px; margin: 10px 0; border-radius: 8px; background: #d4edda; color: #155724; border: 1px solid #c3e6cb;">{messages}</div>' if messages else ''}
                    
                    <div style="border: 2px solid #4facfe; padding: 20px; border-radius: 10px; background: white;">'__)
app.secret_key = os.environ.get('SECRET_KEY', 'cloud-picture-storage-secret')

# Azure Storage configuration - Uses Azure Managed Identity (no secrets needed!)
STORAGE_ACCOUNT_NAME = os.environ.get('AZURE_STORAGE_ACCOUNT_NAME', 'storagebtn1609')

# Initialize Azure clients using DefaultAzureCredential (no keys needed!)
blob_service = None
table_service = None

def init_azure_services():
    """Initialize Azure services with proper error handling"""
    global blob_service, table_service
    
    try:
        # This automatically uses Managed Identity when deployed to Azure, or Azure CLI when local
        credential = DefaultAzureCredential()
        blob_service = BlobServiceClient(
            account_url=f"https://{STORAGE_ACCOUNT_NAME}.blob.core.windows.net", 
            credential=credential
        )
        table_service = TableServiceClient(
            endpoint=f"https://{STORAGE_ACCOUNT_NAME}.table.core.windows.net", 
            credential=credential
        )
        
        # Test the connection by trying to list containers (simple test)
        try:
            containers = list(blob_service.list_containers())
            print(f"‚úÖ Connected to Azure using credentials. Found {len(containers)} containers.")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Azure authentication test failed: {e}")
            print(f"‚ö†Ô∏è Storage account: {STORAGE_ACCOUNT_NAME}")
            print(f"‚ö†Ô∏è Credential type: {type(credential).__name__}")
            raise e
        
    except Exception as e:
        print(f"‚ö†Ô∏è Azure connection failed: {e}")
        print(f"‚ö†Ô∏è Storage account name: {STORAGE_ACCOUNT_NAME}")
        print(f"‚ö†Ô∏è Environment variables: PORT={os.environ.get('PORT', 'not set')}, SECRET_KEY={'set' if os.environ.get('SECRET_KEY') else 'not set'}")
        blob_service = None
        table_service = None
        return False

# Try to initialize Azure services on startup, but don't fail if it doesn't work
azure_available = init_azure_services()

@app.route('/')
def index():
    messages = request.args.get('messages', '')
    
    # Show Azure connection status
    azure_status = "‚úÖ Connected to Azure" if azure_available else "‚ö†Ô∏è Azure services not available"
    
    return f'''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cloud Picture Storage System</title>
    <style>
        body {{ 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{ 
            max-width: 900px; 
            margin: 0 auto; 
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        .header h1 {{ margin: 0; font-size: 2.5em; }}
        .header p {{ margin: 10px 0 0 0; opacity: 0.9; }}
        .section {{ 
            margin: 0; 
            padding: 25px; 
            border-bottom: 1px solid #eee;
        }}
        .section:last-child {{ border-bottom: none; }}
        .section h2 {{ 
            color: #333; 
            margin-top: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }}
        .form-group {{
            margin: 15px 0;
        }}
        button {{ 
            padding: 12px 25px; 
            margin: 5px; 
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }}
        .btn-primary {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }}
        .btn-primary:hover {{
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }}
        .btn-danger {{
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
        }}
        .btn-danger:hover {{
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }}
        input[type="text"], input[type="number"], input[type="file"] {{ 
            padding: 12px; 
            margin: 5px; 
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }}
        input[type="text"]:focus, input[type="number"]:focus {{
            border-color: #667eea;
            outline: none;
        }}
        .message {{
            padding: 15px;
            margin: 10px 25px;
            border-radius: 8px;
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }}
        .form-row {{
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }}
        .emoji {{ font-size: 1.2em; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üå©Ô∏è Cloud Picture Storage System</h1>
            <p>Upload CSV data and pictures, then search and manage your data with Azure</p>
            <p style="font-size: 0.9em; opacity: 0.8;">{azure_status}</p>
        </div>
        
        {f'<div class="message">{messages}</div>' if messages else ''}
        
        <div class="section">
            <h2><span class="emoji">üìÅ</span> Upload CSV File</h2>
            <form action="/upload_csv" method="post" enctype="multipart/form-data">
                <div class="form-row">
                    <input type="file" name="csv_file" accept=".csv" required>
                    <button type="submit" class="btn-primary">Upload CSV</button>
                </div>
                <small>Upload your people.csv file to populate the database</small>
            </form>
        </div>
        
        <div class="section">
            <h2><span class="emoji">üì∏</span> Upload Pictures</h2>
            <form action="/upload_pictures" method="post" enctype="multipart/form-data">
                <div class="form-row">
                    <input type="file" name="picture_files" accept="image/*" multiple required>
                    <button type="submit" class="btn-primary">Upload Pictures</button>
                </div>
                <small>Select multiple image files to upload to Azure Blob Storage</small>
            </form>
        </div>
        
        <div class="section">
            <h2><span class="emoji">üîç</span> Search by Name</h2>
            <form action="/search_name" method="get">
                <div class="form-row">
                    <input type="text" name="name" placeholder="Enter name or partial name (e.g., 'dav' finds Dave)" required>
                    <button type="submit" class="btn-primary">Search</button>
                </div>
                <small>Find people by name - supports partial matches and case-insensitive search</small>
            </form>
        </div>
        
        <div class="section">
            <h2><span class="emoji">üí∞</span> Search by Salary</h2>
            <form action="/search_salary" method="get">
                <div class="form-row">
                    <select name="comparison" required style="padding: 12px; margin: 5px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 14px;">
                        <option value="under">Under (less than)</option>
                        <option value="over">Over (greater than)</option>
                    </select>
                    <input type="number" name="salary_amount" placeholder="Salary amount (e.g., 99000)" required>
                    <button type="submit" class="btn-primary">Find People</button>
                </div>
                <small>Find people with salaries above or below the specified amount</small>
            </form>
        </div>
        
        <div class="section">
            <h2><span class="emoji">‚úèÔ∏è</span> Update Person</h2>
            <form action="/update_person" method="post">
                <div class="form-group">
                    <input type="text" name="name" placeholder="Person's name" required>
                    <input type="text" name="field" placeholder="Field to update (e.g., Keywords)" required>
                    <input type="text" name="value" placeholder="New value" required>
                </div>
                <button type="submit" class="btn-primary">Update</button>
                <br><small>Update any field for a person (e.g., change Tuan's keywords)</small>
            </form>
        </div>
        
        <div class="section">
            <h2><span class="emoji">üóëÔ∏è</span> Remove Person</h2>
            <form action="/remove_person" method="post" onsubmit="return confirm('Are you sure?')">
                <div class="form-row">
                    <input type="text" name="name" placeholder="Person's name" required>
                    <button type="submit" class="btn-danger">Remove Person</button>
                </div>
                <small>Permanently delete a person from the database</small>
            </form>
        </div>
    </div>
</body>
</html>
    '''

@app.route('/upload_csv', methods=['POST'])
def upload_csv():
    if not table_service:
        return redirect('/?messages=‚ùå Azure Table Storage not available - Please ensure Azure credentials are configured')
    
    try:
        file = request.files.get('csv_file')  # Use .get() instead of direct access
        if file and file.filename and file.filename.endswith('.csv'):
            csv_content = file.read().decode('utf-8')
            csv_reader = csv.DictReader(io.StringIO(csv_content))
            
            table_client = table_service.get_table_client('people')
            
            # Ensure table exists
            try:
                table_client.create_table()
                print("‚úÖ Created 'people' table")
            except ResourceExistsError:
                print("‚úÖ 'people' table already exists")
            except Exception as e:
                print(f"‚ö†Ô∏è Table access issue: {e}")
            
            count = 0
            for row in csv_reader:
                entity = {
                    'PartitionKey': 'person',
                    'RowKey': row.get('Name', f'person_{count}'),
                    'Name': row.get('Name', ''),
                    'State': row.get('State', ''),
                    'Salary': row.get('Salary', ''),
                    'Grade': row.get('Grade', ''),
                    'Room': row.get('Room', ''),
                    'Phone': row.get('Phone', ''),
                    'Picture': row.get('Picture', ''),
                    'Keywords': row.get('Keywords', '')
                }
                
                try:
                    table_client.upsert_entity(entity)
                    count += 1
                except Exception as e:
                    print(f"Error uploading entity: {e}")
            
            return redirect(f'/?messages=‚úÖ Successfully uploaded {count} people to Azure!')
        else:
            return redirect('/?messages=‚ùå Please select a valid CSV file')
    except Exception as e:
        print(f"CSV upload error: {e}")  # Add logging
        return redirect(f'/?messages=‚ùå Error uploading CSV: {str(e)}')

@app.route('/upload_pictures', methods=['POST'])
def upload_pictures():
    if not blob_service:
        return redirect('/?messages=‚ùå Azure Blob Storage not available')
    
    try:
        files = request.files.getlist('picture_files')
        blob_container = blob_service.get_container_client('images')
        
        count = 0
        for file in files:
            if file and file.filename:
                try:
                    blob_container.upload_blob(
                        name=file.filename,
                        data=file.read(),
                        overwrite=True
                    )
                    count += 1
                except Exception as e:
                    print(f"Error uploading {file.filename}: {e}")
        
        return redirect(f'/?messages=‚úÖ Uploaded {count} pictures to Azure!')
    except Exception as e:
        return redirect(f'/?messages=‚ùå Error uploading pictures: {str(e)}')

@app.route('/search_name')
def search_name():
    name = request.args.get('name', '').strip()
    exact_name = request.args.get('exact_name', '').strip()
    messages = request.args.get('messages', '').strip()
    
    # If exact_name is provided, do exact matching only
    if exact_name:
        search_term = exact_name
        exact_match_only = True
    elif name:
        search_term = name
        exact_match_only = False
    else:
        return redirect('/?messages=‚ùå Please enter a name')
    
    if not table_service:
        return redirect('/?messages=‚ùå Could not access Azure table - please ensure you are authenticated')
    
    try:
        table_client = table_service.get_table_client('people')
        
        # Search for people with flexible name matching
        try:
            # Get all people from the table for flexible searching
            all_entities = table_client.query_entities("PartitionKey eq 'person'")
            matching_people = []
            
            # Convert search term to lowercase for case-insensitive comparison
            search_term_lower = search_term.lower()
            
            for entity in all_entities:
                # Get the actual name value (handle EntityProperty objects)
                name_raw = entity.get('Name', '')
                if hasattr(name_raw, 'value'):
                    person_name = str(name_raw.value)
                else:
                    person_name = str(name_raw)
                
                # Skip entities with empty, null, or invalid names
                if not person_name or person_name.lower().strip() in ['', 'n/a', 'null', 'none', 'na']:
                    continue
                
                # Check for matches based on search type
                if exact_match_only:
                    # Exact match (case-insensitive)
                    if search_term_lower == person_name.lower():
                        matching_people.append(entity)
                else:
                    # Partial match (case-insensitive)
                    if search_term_lower in person_name.lower():
                        matching_people.append(entity)
            
        except Exception as table_error:
            print(f"Table query error in search_name: {table_error}")
            return redirect('/?messages=‚ùå Could not access Azure table - please ensure you are authenticated')
        
        if matching_people:
            # Helper function to handle EntityProperty objects
            def get_display_value(value):
                if hasattr(value, 'value'):
                    return str(value.value)
                return str(value) if value else 'N/A'
            
            # If only one match, show detailed view
            if len(matching_people) == 1:
                person = matching_people[0]
                picture_url = ""
                if person.get('Picture'):
                    picture_url = f"https://{STORAGE_ACCOUNT_NAME}.blob.core.windows.net/images/{person['Picture']}"
                
                return f'''
                <div style="font-family: Arial; max-width: 800px; margin: 50px auto; padding: 20px;">
                    <h1>üîç Search Results for: "{search_term}"</h1>
                    
                    {f'<div style="padding: 15px; margin: 10px 0; border-radius: 8px; background: #d4edda; color: #155724; border: 1px solid #c3e6cb;">{messages}</div>' if messages else ''}
                    
                    <div style="border: 2px solid #4facfe; padding: 20px; border-radius: 10px; background: white;">
                        <h2>üë§ {get_display_value(person.get('Name', 'N/A'))}</h2>
                        {f'<img src="{picture_url}" alt="{get_display_value(person.get("Name", ""))}" style="max-width: 200px; margin: 10px 0; border-radius: 8px;">' if picture_url else '<p>üì∑ No picture available</p>'}
                        <p><strong>State:</strong> {get_display_value(person.get('State', 'N/A'))}</p>
                        <p><strong>Salary:</strong> ${get_display_value(person.get('Salary', 'N/A'))}</p>
                        <p><strong>Grade:</strong> {get_display_value(person.get('Grade', 'N/A'))}</p>
                        <p><strong>Room:</strong> {get_display_value(person.get('Room', 'N/A'))}</p>
                        <p><strong>Phone:</strong> {get_display_value(person.get('Phone', 'N/A'))}</p>
                        <p><strong>Keywords:</strong> {get_display_value(person.get('Keywords', 'N/A'))}</p>
                        
                        <!-- Edit and Remove Actions -->
                        <div style="margin-top: 25px; border-top: 1px solid #eee; padding-top: 20px;">
                            <h3 style="color: #333; margin-bottom: 15px;">‚öôÔ∏è Actions</h3>
                            
                            <!-- Quick Edit Form -->
                            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                                <h4 style="margin: 0 0 10px 0; color: #666;">‚úèÔ∏è Quick Edit</h4>
                                <form action="/update_person" method="post" style="display: flex; gap: 10px; flex-wrap: wrap; align-items: end;">
                                    <input type="hidden" name="name" value="{get_display_value(person.get('Name', 'N/A'))}">
                                    <div>
                                        <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">Field:</label>
                                        <select name="field" required style="padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                            <option value="State">State</option>
                                            <option value="Salary">Salary</option>
                                            <option value="Grade">Grade</option>
                                            <option value="Room">Room</option>
                                            <option value="Phone">Phone</option>
                                            <option value="Keywords">Keywords</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">New Value:</label>
                                        <input type="text" name="value" required style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; min-width: 150px;">
                                    </div>
                                    <button type="submit" style="padding: 8px 15px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">Update</button>
                                </form>
                            </div>
                            
                            <!-- Update Profile Picture -->
                            <div style="background: #f0f9ff; padding: 15px; border-radius: 8px; margin-bottom: 15px; border: 1px solid #bfdbfe;">
                                <h4 style="margin: 0 0 10px 0; color: #1e40af;">üì∏ Update Profile Picture</h4>
                                <form action="/update_person_image" method="post" enctype="multipart/form-data" style="display: flex; gap: 10px; flex-wrap: wrap; align-items: end;">
                                    <input type="hidden" name="name" value="{get_display_value(person.get('Name', 'N/A'))}">
                                    <div>
                                        <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">Choose Image:</label>
                                        <input type="file" name="image_file" accept="image/*" required 
                                               style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background: white;">
                                    </div>
                                    <button type="submit" style="padding: 8px 15px; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;">Upload Image</button>
                                </form>
                                <small style="color: #666; font-size: 11px;">Supported formats: JPG, PNG, GIF. Image will be stored in Azure Blob Storage.</small>
                            </div>
                            
                            <!-- Remove Person -->
                            <div style="background: #fff5f5; padding: 15px; border-radius: 8px; border: 1px solid #fed7d7;">
                                <h4 style="margin: 0 0 10px 0; color: #e53e3e;">üóëÔ∏è Remove Person</h4>
                                <form action="/remove_person" method="post" style="display: flex; gap: 10px; align-items: center;">
                                    <input type="hidden" name="name" value="{get_display_value(person.get('Name', 'N/A'))}">
                                    <span style="color: #666; font-size: 14px;">This action cannot be undone.</span>
                                    <button type="submit" onclick="return confirm('Are you sure you want to remove {get_display_value(person.get('Name', 'N/A'))}? This cannot be undone!')" 
                                            style="padding: 8px 15px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">Remove Person</button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div style="margin-top: 20px; text-align: center;">
                        <a href="/" style="display: inline-block; padding: 10px 20px; background: #4facfe; color: white; text-decoration: none; border-radius: 5px; margin-right: 10px;">‚Üê Back to Home</a>
                        <a href="javascript:history.back()" style="display: inline-block; padding: 10px 20px; background: #6c757d; color: white; text-decoration: none; border-radius: 5px;">‚Üê Back to Search</a>
                    </div>
                </div>
                '''
            
            # If multiple matches, show a list to choose from
            else:
                result_html = f'''
                <div style="font-family: Arial; max-width: 1000px; margin: 50px auto; padding: 20px;">
                    <h1>üîç Multiple matches found for: "{search_term}"</h1>
                    <p style="margin-bottom: 20px;">Found {len(matching_people)} people matching your search:</p>
                    
                    <style>
                        .person-card {{
                            border: 1px solid #ddd;
                            padding: 15px;
                            border-radius: 8px;
                            min-width: 250px;
                            background: white;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            margin: 10px;
                            display: inline-block;
                            vertical-align: top;
                            text-decoration: none;
                            color: inherit;
                            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                        }}
                        .person-card:hover {{
                            transform: translateY(-5px);
                            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
                            border-color: #4facfe;
                            background: #f8fbff;
                        }}
                        .person-card h3 {{
                            margin: 0 0 10px 0;
                            color: #333;
                        }}
                        .person-card img {{
                            max-width: 150px;
                            border-radius: 5px;
                            margin: 10px 0;
                            display: block;
                        }}
                        .person-card p {{
                            margin: 5px 0;
                        }}
                        .click-hint {{
                            color: #4facfe;
                            font-size: 12px;
                            margin: 15px 0 0 0;
                            font-weight: bold;
                        }}
                    </style>
                    
                    <div style="display: flex; flex-wrap: wrap; gap: 20px; margin: 20px 0;">
                '''
                
                for person in matching_people:
                    picture_url = ""
                    if person.get('Picture'):
                        picture_url = f"https://{STORAGE_ACCOUNT_NAME}.blob.core.windows.net/images/{person['Picture']}"
                    
                    # Create a clickable card for each person
                    person_name = get_display_value(person.get('Name', 'N/A'))
                    # URL encode the name to handle special characters and spaces
                    import urllib.parse
                    encoded_name = urllib.parse.quote(person_name)
                    result_html += f'''
                    <a href="/search_name?exact_name={encoded_name}" class="person-card">
                        <h3>üë§ {person_name}</h3>
                        {f'<img src="{picture_url}" alt="{person_name}">' if picture_url else '<p>üì∑ No picture</p>'}
                        <p><strong>State:</strong> {get_display_value(person.get('State', 'N/A'))}</p>
                        <p><strong>Salary:</strong> ${get_display_value(person.get('Salary', 'N/A'))}</p>
                        <p class="click-hint">Click to view details ‚Üí</p>
                    </a>
                    '''
                
                result_html += '''
                    </div>
                    <a href="/" style="margin-top: 20px; display: inline-block; padding: 10px 20px; background: #4facfe; color: white; text-decoration: none; border-radius: 5px;">‚Üê Back to Home</a>
                </div>
                '''
                return result_html
        else:
            return redirect(f'/?messages=‚ùå No people found matching "{search_term}". Try a shorter search term or check spelling.')
    
    except Exception as e:
        print(f"Search name error: {e}")
        return redirect('/?messages=‚ùå Search error - Azure services not available in local mode')

@app.route('/search_salary')
def search_salary():
    # Handle both new and old parameter formats for backward compatibility
    salary_amount = request.args.get('salary_amount') or request.args.get('max_salary')
    comparison = request.args.get('comparison', 'under')  # Default to 'under' for backward compatibility
    
    if not salary_amount:
        return redirect('/?messages=‚ùå Please enter a salary amount')
    
    # Validate the salary input first
    try:
        target_salary = float(salary_amount)
        if target_salary <= 0:
            return redirect('/?messages=‚ùå Please enter a positive salary number')
    except ValueError:
        return redirect('/?messages=‚ùå Please enter a valid salary number')
    
    # Validate comparison parameter
    if comparison not in ['under', 'over']:
        comparison = 'under'
    
    if not table_service:
        return redirect('/?messages=‚ùå Could not access Azure table - please ensure you are authenticated')
    
    try:
        table_client = table_service.get_table_client('people')
        
        # Test if we can actually access the table
        try:
            entities = table_client.query_entities("PartitionKey eq 'person'")
            entities_list = list(entities)  # Convert to list to check if query works
        except Exception as table_error:
            print(f"Table query error: {table_error}")
            return redirect('/?messages=‚ùå Could not access Azure table - please ensure you are properly authenticated and have uploaded data')
        
        matching_people = []
        
        for entity in entities_list:
            try:
                # First, check if this person has a valid name
                name_raw = entity.get('Name', '')
                if hasattr(name_raw, 'value'):
                    person_name = str(name_raw.value)
                else:
                    person_name = str(name_raw)
                
                # Skip entities with empty, null, or invalid names
                if not person_name or person_name.lower().strip() in ['', 'n/a', 'null', 'none', 'na']:
                    continue
                
                # Handle EntityProperty objects from Azure Table Storage
                salary_raw = entity.get('Salary', '0')
                # Convert EntityProperty to string if needed
                if hasattr(salary_raw, 'value'):
                    salary_str = str(salary_raw.value)
                else:
                    salary_str = str(salary_raw)
                
                # Clean up the salary string
                salary_str = salary_str.replace('$', '').replace(',', '').strip()
                
                # Check if we have a valid numeric salary
                if salary_str and salary_str.replace('.', '').replace('-', '').isdigit():
                    salary = float(salary_str)
                    
                    # Apply the comparison logic
                    if comparison == 'under' and salary < target_salary:
                        matching_people.append(entity)
                    elif comparison == 'over' and salary > target_salary:
                        matching_people.append(entity)
                else:
                    # For non-numeric salaries, include them based on comparison type
                    # (could be N/A, empty, etc.)
                    if comparison == 'under':
                        matching_people.append(entity)  # Assume unknown salaries are "low"
                        
            except (ValueError, AttributeError) as e:
                print(f"Error processing salary for entity: {e}")
                # Include people with invalid salary data in "under" searches only
                if comparison == 'under':
                    matching_people.append(entity)
        
        # Create appropriate heading based on comparison
        comparison_text = "less than" if comparison == "under" else "greater than"
        comparison_symbol = "<" if comparison == "under" else ">"
        
        if matching_people:
            result_html = f'''
            <div style="font-family: Arial; max-width: 1000px; margin: 50px auto; padding: 20px;">
                <h1>üí∞ People with salary {comparison_text} ${target_salary:,.0f}</h1>
                <p style="margin-bottom: 20px;">Found {len(matching_people)} people matching your criteria:</p>
                
                <style>
                    .person-card {{
                        border: 1px solid #ddd;
                        padding: 15px;
                        border-radius: 8px;
                        min-width: 250px;
                        background: white;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        margin: 10px;
                        display: inline-block;
                        vertical-align: top;
                        text-decoration: none;
                        color: inherit;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }}
                    .person-card:hover {{
                        transform: translateY(-5px);
                        box-shadow: 0 8px 20px rgba(0,0,0,0.15);
                        border-color: #4facfe;
                        background: #f8fbff;
                    }}
                    .person-card h3 {{
                        margin: 0 0 10px 0;
                        color: #333;
                    }}
                    .person-card img {{
                        max-width: 150px;
                        border-radius: 5px;
                        margin: 10px 0;
                        display: block;
                    }}
                    .person-card p {{
                        margin: 5px 0;
                    }}
                    .click-hint {{
                        color: #4facfe;
                        font-size: 12px;
                        margin: 15px 0 0 0;
                        font-weight: bold;
                    }}
                </style>
                
                <div style="display: flex; flex-wrap: wrap; gap: 20px; margin: 20px 0;">
            '''
            
            for person in matching_people:
                picture_url = ""
                if person.get('Picture'):
                    picture_url = f"https://{STORAGE_ACCOUNT_NAME}.blob.core.windows.net/images/{person['Picture']}"
                
                # Handle EntityProperty objects for display
                def get_display_value(value):
                    if hasattr(value, 'value'):
                        return str(value.value)
                    return str(value) if value else 'N/A'
                
                # Create a clickable card for each person
                person_name = get_display_value(person.get('Name', 'N/A'))
                # URL encode the name to handle special characters and spaces
                import urllib.parse
                encoded_name = urllib.parse.quote(person_name)
                
                result_html += f'''
                <a href="/search_name?exact_name={encoded_name}" class="person-card">
                    <h3>üë§ {person_name}</h3>
                    {f'<img src="{picture_url}" alt="{person_name}">' if picture_url else '<p>üì∑ No picture</p>'}
                    <p><strong>State:</strong> {get_display_value(person.get('State', 'N/A'))}</p>
                    <p><strong>Salary:</strong> ${get_display_value(person.get('Salary', 'N/A'))}</p>
                    <p class="click-hint">Click to view details ‚Üí</p>
                </a>
                '''
            
            result_html += '</div><a href="/" style="padding: 10px 20px; background: #4facfe; color: white; text-decoration: none; border-radius: 5px;">‚Üê Back</a></div>'
            return result_html
        else:
            # If no data found, it might be because there's no data in the table
            if not entities_list:
                return redirect('/?messages=‚ùå No data found in the database. Please upload CSV data first.')
            else:
                return redirect(f'/?messages=‚ùå No people found with salary {comparison_symbol} ${target_salary:,.0f}')
    
    except Exception as e:
        print(f"Search salary error: {e}")
        # Provide more specific error information for debugging
        error_msg = f"Error searching by salary: {str(e)[:200]}"
        return redirect(f'/?messages=‚ùå {error_msg}')

@app.route('/update_person', methods=['POST'])
def update_person():
    name = request.form.get('name', '').strip()
    field = request.form.get('field', '').strip()
    value = request.form.get('value', '').strip()
    
    if not all([name, field, value]):
        return redirect('/?messages=‚ùå Please fill all fields')
    
    if not table_service:
        return redirect('/?messages=‚ùå Azure Table Storage not available')
    
    try:
        table_client = table_service.get_table_client('people')
        entities = table_client.query_entities(f"PartitionKey eq 'person' and Name eq '{name}'")
        person = None
        for entity in entities:
            person = entity
            break
        
        if person:
            person[field] = value
            table_client.upsert_entity(person)
            return redirect(f'/?messages=‚úÖ Updated {field} for {name}!')
        else:
            return redirect(f'/?messages=‚ùå {name} not found')
    
    except Exception as e:
        return redirect(f'/?messages=‚ùå Update error: {str(e)}')

@app.route('/update_person_image', methods=['POST'])
def update_person_image():
    name = request.form.get('name', '').strip()
    image_file = request.files.get('image_file')
    
    if not name:
        return redirect('/?messages=‚ùå Please specify a person name')
    
    if not image_file or not image_file.filename:
        return redirect('/?messages=‚ùå Please select an image file')
    
    if not (blob_service and table_service):
        return redirect('/?messages=‚ùå Azure services not available')
    
    try:
        # Generate a unique filename for the image
        file_extension = image_file.filename.split('.')[-1] if '.' in image_file.filename else 'jpg'
        # Use person's name as the filename (sanitized)
        safe_name = "".join(c for c in name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        new_filename = f"{safe_name.replace(' ', '_').lower()}.{file_extension}"
        
        # Upload the image to Azure Blob Storage
        blob_container = blob_service.get_container_client('images')
        
        try:
            # Upload the new image (overwrite if exists)
            blob_container.upload_blob(
                name=new_filename,
                data=image_file.read(),
                overwrite=True
            )
            print(f"‚úÖ Uploaded image: {new_filename}")
        except Exception as blob_error:
            print(f"Blob upload error: {blob_error}")
            return redirect(f'/?messages=‚ùå Failed to upload image: {str(blob_error)}')
        
        # Update the person's Picture field in Azure Table Storage
        table_client = table_service.get_table_client('people')
        entities = table_client.query_entities(f"PartitionKey eq 'person' and Name eq '{name}'")
        person = None
        for entity in entities:
            person = entity
            break
        
        if person:
            # Update the Picture field with the new filename
            person['Picture'] = new_filename
            table_client.upsert_entity(person)
            
            # Redirect back to the person's detail page
            import urllib.parse
            encoded_name = urllib.parse.quote(name)
            return redirect(f'/search_name?exact_name={encoded_name}&messages=‚úÖ Image updated successfully!')
        else:
            return redirect(f'/?messages=‚ùå Person "{name}" not found in database')
    
    except Exception as e:
        print(f"Update image error: {e}")
        return redirect(f'/?messages=‚ùå Error updating image: {str(e)}')

@app.route('/remove_person', methods=['POST'])
def remove_person():
    name = request.form.get('name', '').strip()
    if not name:
        return redirect('/?messages=‚ùå Please enter a name')
    
    if not table_service:
        return redirect('/?messages=‚ùå Azure Table Storage not available')
    
    try:
        table_client = table_service.get_table_client('people')
        entities = table_client.query_entities(f"PartitionKey eq 'person' and Name eq '{name}'")
        deleted = False
        for entity in entities:
            table_client.delete_entity(partition_key='person', row_key=entity['RowKey'])
            deleted = True
            break
        
        if deleted:
            return redirect(f'/?messages=‚úÖ Removed {name}!')
        else:
            return redirect(f'/?messages=‚ùå {name} not found')
    
    except Exception as e:
        return redirect(f'/?messages=‚ùå Error: {str(e)}')

@app.errorhandler(500)
def internal_server_error(error):
    return f'''
    <div style="font-family: Arial; max-width: 600px; margin: 50px auto; padding: 20px; border: 1px solid #ff4444; background: #ffe6e6;">
        <h1 style="color: #cc0000;">Internal Server Error</h1>
        <p>An error occurred while processing your request.</p>
        <p><strong>Error:</strong> {str(error)}</p>
        <a href="/" style="padding: 10px 20px; background: #4facfe; color: white; text-decoration: none; border-radius: 5px;">‚Üê Back to Home</a>
    </div>
    ''', 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=True)
