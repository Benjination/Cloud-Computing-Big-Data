THE PLAN: Cloud-Based Text Search Engine Assignment
=======================================================

ASSIGNMENT OVERVIEW:
Build a cloud-based text search engine that can process large textual documents, 
index them, and provide search functionality through a web interface.

CURRENT ASSETS:
- Alice.txt (Alice in Wonderland - 3,351 lines, English)
- CandideEn.txt (Candide in English - 3,834 lines)
- CandideFr.txt (Candide in French - 3,942 lines)
- StopWords.txt (Common words to ignore during processing)
- index.html (Basic web interface with upload functionality)

STEP-BY-STEP IMPLEMENTATION PLAN:
=======================================================

PHASE 1: BACKEND DEVELOPMENT & CLOUD SETUP
-------------------------------------------

Step 1: Set Up GitHub & Firebase Infrastructure ✓ SELECTED
- GitHub Repository: Already set up (Cloud-Computing-Big-Data)
- GitHub Pages: Enable for hosting the web interface
- GitHub Actions: Set up for CI/CD pipeline (optional for now)
- Firebase Project: Create new Firebase project
- Firestore Database: Set up for document indexing and metadata
- Firebase Storage: Set up for storing original text files
- Firebase Hosting: Alternative to GitHub Pages (choose one)
- Firebase Functions: For server-side text processing (optional)

Step 2: Document Processing Pipeline
- Create text cleaning module:
  * Remove non-ASCII characters
  * Convert to lowercase
  * Remove punctuation
  * Remove stop words (using StopWords.txt)
  * Optional: Word stemming (cats -> cat)
- Create document ingestion service
- Implement batch processing for existing documents

Step 3: Text Indexing System
- Design index structure (word -> document mappings with positions)
- Implement inverted index creation
- Store word frequencies and positions within documents
- Create bi-gram and tri-gram processing for phrase searches
- Implement efficient storage and retrieval

Step 4: Language Detection
- Implement letter frequency analysis
- Create bi-gram frequency comparison
- Train on sample documents (English vs French using Candide files)
- Add language detection to processing pipeline

PHASE 2: SEARCH ENGINE CORE
----------------------------

Step 5: Search Algorithm Implementation
- Single word search functionality
- Multi-word search with proximity scoring
- Phrase search ("cloud computing" as exact phrase)
- Word order flexibility ("red hot" = "hot red")
- Fuzzy matching for typos ("teh" -> "the")
- Ranking algorithm for result relevance

Step 6: Search API Development
- RESTful API endpoints for search queries
- Document upload endpoints
- Index management endpoints
- Status and health check endpoints
- Error handling and validation

PHASE 3: WEB INTERFACE ENHANCEMENT
----------------------------------

Step 7: Frontend JavaScript Development
- Implement missing functions in index.html:
  * AnalyzeText() - for single document analysis
  * uploadText() - for file upload processing
  * showDataUpload() - toggle upload interface
  * clearDatabase() - clear all indexed documents
- Add search interface and results display
- Implement progress tracking for uploads
- Add language detection display

Step 8: Search Interface Creation
- Create search input field with autocomplete
- Implement search results display with:
  * Document titles/names
  * Relevant line numbers or paragraphs
  * Highlighted search terms in context
  * Language detection results
- Add advanced search options (exact phrase, exclude words)
- Implement pagination for large result sets

Step 9: Document Management Interface
- Display list of uploaded/indexed documents
- Show document statistics (word count, language, etc.)
- Provide document preview functionality
- Add document deletion capability

PHASE 4: OPTIMIZATION & ADVANCED FEATURES
-----------------------------------------

Step 10: Performance Optimization
- Implement caching for frequent searches
- Optimize index structure for faster queries
- Add search result ranking improvements
- Implement query suggestion/autocomplete

Step 11: Advanced Search Features
- Boolean search operators (AND, OR, NOT)
- Wildcard searches (comput* finds computer, computing, etc.)
- Date/metadata filtering if available
- Search within specific documents
- Similar document recommendations

Step 12: Analytics & Monitoring
- Track search queries and popular terms
- Monitor system performance and response times
- Implement logging for debugging
- Add usage statistics dashboard

PHASE 5: TESTING & DEPLOYMENT
-----------------------------

Step 13: Testing Strategy
- Unit tests for text processing functions
- Integration tests for search functionality
- Load testing with large document sets
- Test with provided documents (Alice, Candide EN/FR)
- Validate language detection accuracy

Step 14: GitHub + Firebase Deployment ✓ UPDATED
- Deploy frontend to GitHub Pages (automatic from main branch)
- Configure custom domain if desired
- Set up GitHub Actions for automated testing (optional)
- Configure Firebase security rules for production
- Monitor Firebase usage and quotas
- Set up Firebase performance monitoring

Step 15: Documentation & Demo
- Create user documentation
- Document API endpoints
- Prepare demo with sample searches
- Performance benchmarking results
- Language detection accuracy metrics

TECHNICAL CONSIDERATIONS:
=======================================================

Database Choice: ✓ FIREBASE SELECTED
- Firestore: Primary database for storing processed text indices
  * Collections: documents, words, search_index
  * Real-time updates and offline support
  * Scalable and serverless
- Firebase Storage: For storing original text files
- Firebase Authentication: For user management (if needed)

Cloud Services: ✓ GITHUB + FIREBASE SELECTED
- GitHub Pages: Static website hosting
- GitHub Actions: CI/CD pipeline for automated deployment
- Firebase Firestore: NoSQL database for text indexing
- Firebase Storage: File storage for documents
- Firebase Functions: Server-side processing (JavaScript/TypeScript)
- Firebase Hosting: Alternative hosting option

Programming Languages: ✓ UPDATED FOR FIREBASE
- Frontend: JavaScript (vanilla) - already started in index.html
- Backend: JavaScript/TypeScript (Firebase Functions)
- Client-side processing: JavaScript (for initial implementation)
- Server-side processing: Firebase Functions when needed

Key Libraries/Tools: ✓ FIREBASE FOCUSED
- Firebase SDK: For database operations and file storage
- Text processing: JavaScript string methods + custom functions
- Stemming: Custom implementation or lightweight JS library
- Language detection: Custom frequency analysis in JavaScript
- Web framework: Vanilla JavaScript (no framework needed initially)

IMMEDIATE NEXT STEPS: ✓ GITHUB + FIREBASE FOCUSED
=======================================================

1. ✓ Set up Firebase project and configure Firestore database
2. ✓ Enable GitHub Pages for your repository
3. ✓ Add Firebase SDK to index.html
4. ✓ Implement missing JavaScript functions with Firebase integration
5. ✓ Test document upload to Firebase Storage
6. ✓ Create Firestore collections for text indexing
7. ✓ Begin with simple text processing in JavaScript

FIREBASE SETUP CHECKLIST:
□ Create Firebase project at https://console.firebase.google.com
□ Enable Firestore Database in test mode
□ Enable Firebase Storage
□ Get Firebase config object for web app
□ Add Firebase SDK scripts to index.html
□ Initialize Firebase in your JavaScript code
□ Test connection and basic read/write operations

DELIVERABLES CHECKLIST:
=======================================================
□ Working web interface for document upload
□ Text preprocessing and indexing system
□ Search functionality (single word, phrases, fuzzy matching)
□ Language detection feature
□ Cloud deployment
□ Documentation and demo
□ Performance metrics and testing results

SUCCESS METRICS:
=======================================================
- Successfully index and search the provided documents
- Language detection accuracy >90% for English vs French
- Search response time <2 seconds for typical queries
- Handle typos and variations in search terms
- Web interface works smoothly for document upload and search
- System scales to handle hundreds/thousands of documents

NOTE: Start with a minimal viable product focusing on core functionality,
then iteratively add advanced features. Prioritize getting basic search
working with the provided documents before adding complex features.

GITHUB + FIREBASE SETUP GUIDE:
=======================================================

STEP-BY-STEP FIREBASE SETUP:
1. Go to https://console.firebase.google.com
2. Click "Create a project" or "Add project"
3. Name your project (e.g., "text-reader-search")
4. Enable Google Analytics (optional)
5. Choose default account for Firebase features

ENABLE REQUIRED SERVICES:
1. Firestore Database:
   - Go to "Firestore Database" in left sidebar
   - Click "Create database"
   - Choose "Start in test mode" (for development)
   - Select a location (choose closest to your users)

2. Storage:
   - Go to "Storage" in left sidebar
   - Click "Get started"
   - Start in test mode
   - Choose same location as Firestore

3. Web App Setup:
   - Go to Project Settings (gear icon)
   - Scroll down to "Your apps"
   - Click web icon (</>)
   - Register app with nickname "text-reader-web"
   - Copy the Firebase config object

GITHUB PAGES SETUP:
1. In your GitHub repository settings
2. Go to "Pages" section
3. Source: "Deploy from a branch"
4. Branch: "main" (or "master")
5. Folder: "/ (root)"
6. Save - your site will be available at: 
   https://benjination.github.io/Cloud-Computing-Big-Data/

FIRESTORE DATABASE STRUCTURE:
Collections to create:
- documents: {id, name, content, language, wordCount, uploadDate}
- words: {word, documents: [{docId, positions: []}]}
- searches: {query, timestamp, results} (for analytics)

FIREBASE SECURITY RULES (Initial - Test Mode):
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if true; // Change this for production!
    }
  }
}