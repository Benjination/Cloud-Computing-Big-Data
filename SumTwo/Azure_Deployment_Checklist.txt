AZURE FLASK WEB APP DEPLOYMENT CHECKLIST
==========================================

PREREQUISITES
- Azure Account with active subscription
- Visual Studio Code or preferred code editor
- Git installed locally
- Python 3.x installed

1. AZURE SETUP & CONFIGURATION
------------------------------
✅ Create Azure Account (if not existing)
✅ Log into Azure Portal (portal.azure.com)
✅ Create new Resource Group
   - Choose appropriate region (e.g., East US, West US 2)
   - Name: "SumTwoNums" 
✅ Create App Service Plan
   - Choose pricing tier (Basic B1+ for production)
   - Select operating system (Linux recommended for Python)(Linux)
✅ Create App Service (Web App)
   - Choose runtime stack: Python 3.9 or later
   - Configure deployment settings
   - Note the generated domain name (https://sumtwonums-cqhfcthfbzedf2fm.canadacentral-01.azurewebsites.net)

2. LOCAL DEVELOPMENT SETUP
--------------------------
✅ Create project directory structure
✅ Set up Python virtual environment
   - python -m venv .venv
   - Activate virtual environment
✅ Install required packages
   - pip install flask
✅ Create requirements.txt file
   - List all dependencies (flask==2.3.3)
□ Create .gitignore file (exclude .venv, __pycache__, etc.)

3. CODE DEVELOPMENT
------------------
□ Create main application file (app.py)
   - Import Flask and required modules
   - Set up Flask app instance
   - Configure secret key for sessions
   - Create route handlers (@app.route)
   - Implement form processing logic
   - Add error handling
   - Configure app to run on all interfaces (host="0.0.0.0")
□ Create HTML templates or embedded HTML
   - Design form interface
   - Add CSS styling for visual appeal
   - Implement responsive design principles
   - Add form validation (client and server-side)
□ Test application locally
   - Run flask app (python app.py)
   - Test all functionality
   - Verify form submissions work correctly
   - Test error scenarios

4. DEPLOYMENT CONFIGURATION FILES
--------------------------------
□ Create startup command file (startup.txt or startup.sh)
   - Specify how Azure should start your app
   - Example: "python app.py" or "gunicorn -w 4 -b 0.0.0.0:8000 app:app"
□ Create web.config (for Windows App Service) - Optional
   - Configure IIS settings if needed
□ Create .deployment file (if using custom deployment)
   - Specify build commands and deployment settings
□ Configure environment variables
   - Set FLASK_APP, FLASK_ENV if needed
   - Configure any secret keys or API keys

5. VERSION CONTROL SETUP
------------------------
□ Initialize Git repository (git init)
□ Create meaningful commit messages
□ Add all necessary files to repository
□ Create .gitignore to exclude sensitive files
□ Connect to remote repository (GitHub, Azure DevOps, etc.)
□ Push code to remote repository

6. AZURE DEPLOYMENT METHODS (Choose One)
---------------------------------------
OPTION A: Local Git Deployment
□ Configure local Git deployment in Azure Portal
□ Add Azure remote to local Git repository
□ Push code to Azure Git repository
□ Monitor deployment logs

OPTION B: GitHub Integration
□ Connect Azure App Service to GitHub repository
□ Configure continuous deployment
□ Set up branch policies (main/master)
□ Enable automatic deployments on push

OPTION C: VS Code Azure Extension
□ Install Azure App Service extension
□ Sign in to Azure account through VS Code
□ Deploy directly from VS Code
□ Monitor deployment status

OPTION D: Azure CLI
□ Install Azure CLI
□ Login to Azure (az login)
□ Create resource group and app service via CLI
□ Deploy using az webapp up command

7. POST-DEPLOYMENT CONFIGURATION
-------------------------------
□ Verify app is running at generated domain
   - Test URL: https://your-app-name.azurewebsites.net
□ Configure custom domain (if needed)
   - Purchase domain or use existing
   - Configure DNS settings
   - Add custom domain in Azure Portal
   - Configure SSL certificate
□ Set up monitoring and logging
   - Enable Application Insights
   - Configure log streaming
   - Set up alerts for downtime or errors
□ Configure scaling settings
   - Set up auto-scaling rules
   - Configure scaling metrics (CPU, memory, requests)
□ Security configurations
   - Configure authentication (if needed)
   - Set up CORS policies
   - Configure firewall rules
   - Enable HTTPS redirect

8. DOMAIN AND SSL SETUP
----------------------
□ Azure provides free subdomain: appname.azurewebsites.net
□ For custom domain:
   - Register domain with registrar
   - Configure DNS A records or CNAME
   - Add custom domain in Azure Portal
   - Verify domain ownership
   - Enable SSL certificate (free with Azure)
   - Configure HTTPS redirect

9. TESTING AND VALIDATION
-------------------------
□ Test all application functionality on live site
□ Verify form submissions work correctly
□ Test responsive design on different devices
□ Check page load times and performance
□ Validate SSL certificate installation
□ Test error handling scenarios
□ Verify logging and monitoring are working

10. MAINTENANCE AND MONITORING
-----------------------------
□ Set up continuous integration/deployment (CI/CD)
□ Configure backup strategies
□ Monitor application performance
□ Set up automated testing
□ Plan for updates and maintenance windows
□ Document deployment process for future reference

ESTIMATED TIME REQUIREMENTS
--------------------------
- Azure Account Setup: 15-30 minutes
- Local Development: 2-4 hours (depending on complexity)
- Deployment Configuration: 30-60 minutes
- Initial Deployment: 15-30 minutes
- Testing and Validation: 30-60 minutes
- Custom Domain/SSL Setup: 30-60 minutes (if needed)

TOTAL ESTIMATED TIME: 4-7 hours for complete setup

COMMON ISSUES AND TROUBLESHOOTING
--------------------------------
□ Deployment timeouts - usually infrastructure provisioning
□ Python version mismatches - ensure runtime compatibility
□ Missing dependencies - verify requirements.txt is complete
□ Port configuration issues - ensure app listens on correct port
□ Static file serving - configure static file handling if needed
□ Database connection issues - verify connection strings
□ CORS issues - configure cross-origin policies if needed

COST CONSIDERATIONS
------------------
□ Free Tier: F1 App Service Plan (limited resources, good for development)
□ Basic Tier: B1+ (suitable for production, starts ~$13/month)
□ Custom domain: Additional cost if purchasing new domain
□ SSL certificates: Free with Azure App Service
□ Application Insights: Free tier available, charges for high volume

SECURITY BEST PRACTICES
-----------------------
□ Never commit secrets to version control
□ Use Azure Key Vault for sensitive configuration
□ Enable HTTPS redirect
□ Configure proper CORS policies
□ Regular security updates for dependencies
□ Use Azure Security Center recommendations
□ Implement proper input validation and sanitization
